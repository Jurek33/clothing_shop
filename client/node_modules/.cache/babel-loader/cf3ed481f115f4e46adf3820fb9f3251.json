{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport userActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure } from './user.actions';\nexport function* getSnapShotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapShot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapShot.id,\n      ...userSnapShot.data()\n    }));\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\n;\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\n;\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (err) {\n    yield put(signInFailure(err));\n  }\n}\n;\nexport function* onGoogleSignInStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n;\nexport function* onEmailSignInStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n;\nexport function* onCheckUserSession() {\n  yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n;\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated)]);\n}\n;","map":{"version":3,"sources":["/Users/jerzy.gricuk/Desktop/privet/React/clothing_shop/clothing_shop/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","userActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","getSnapShotFromUserAuth","userAuth","userRef","userSnapShot","get","id","data","err","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAA0DC,cAA1D,QAAgF,+BAAhF;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AAChD,MAAI;AACD,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACI,yBAAD,EAA4BK,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACQ,aAAa,CAAC;AACrBO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADI;AACA,SAAGF,YAAY,CAACG,IAAb;AADH,KAAD,CAAd,CAAT;AAGF,GAND,CAME,OAAMC,GAAN,EAAW;AACV,UAAMjB,GAAG,CAACS,aAAa,CAACQ,GAAD,CAAd,CAAT;AACF;AACH;AAED,OAAO,UAAUC,gBAAV,GAA6B;AACjC,MAAI;AACD,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMf,IAAI,CAACgB,eAAL,CAAqBf,cAArB,CAAvB;AACA,UAAMK,uBAAuB,CAACS,IAAD,CAA7B;AACF,GAHD,CAGE,OAAMF,GAAN,EAAW;AACV,UAAMjB,GAAG,CAACS,aAAa,CAACQ,GAAD,CAAd,CAAT;AACF;AACH;AAAA;AAED,OAAO,UAAUI,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA2D;AAC/D,MAAI;AACD,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMf,IAAI,CAACqB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMd,uBAAuB,CAACS,IAAD,CAA7B;AAEF,GAJD,CAIE,OAAMF,GAAN,EAAW;AACV,UAAMjB,GAAG,CAACS,aAAa,CAACQ,GAAD,CAAd,CAAT;AACF;AACH;AAAA;AAED,OAAO,UAAUS,mBAAV,GAAgC;AACpC,MAAI;AACD,UAAMf,QAAQ,GAAG,MAAMJ,cAAc,EAArC;AACA,QAAG,CAACI,QAAJ,EAAc;AACd,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACF,GAJD,CAIE,OAAMM,GAAN,EAAW;AACV,UAAMjB,GAAG,CAACS,aAAa,CAACQ,GAAD,CAAd,CAAT;AACF;AACH;AAAA;AAED,OAAO,UAAUU,mBAAV,GAAgC;AACpC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,oBAAjB,EAAuCV,gBAAvC,CAAhB;AACF;AAAA;AAED,OAAO,UAAUW,kBAAV,GAA+B;AACnC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,mBAAjB,EAAsCT,eAAtC,CAAhB;AACF;AAAA;AAED,OAAO,UAAUU,kBAAV,GAA+B;AACnC,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,kBAAjB,EAAqCN,mBAArC,CAAhB;AACF;AAAA;AAED,OAAO,UAAUO,SAAV,GAAsB;AAC1B,QAAMhC,GAAG,CAAE,CAAEC,IAAI,CAACyB,mBAAD,CAAN,EAA6BzB,IAAI,CAAC2B,kBAAD,CAAjC,EAAuD3B,IAAI,CAACwB,mBAAD,CAA3D,CAAF,CAAT;AACF;AAAA","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport userActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure } from './user.actions';\n\nexport function* getSnapShotFromUserAuth(userAuth) {\n   try { \n      const userRef = yield call(createUserProfileDocument, userAuth);\n      const userSnapShot = yield userRef.get();\n      yield put(signInSuccess({ \n         id: userSnapShot.id, ...userSnapShot.data() \n      }));\n   } catch(err) {\n      yield put(signInFailure(err));\n   }\n}\n\nexport function* signInWithGoogle() {\n   try {\n      const { user } = yield auth.signInWithPopup(googleProvider);\n      yield getSnapShotFromUserAuth(user)\n   } catch(err) {\n      yield put(signInFailure(err));\n   }\n};\n\nexport function* signInWithEmail({ payload: { email, password }}) {\n   try {\n      const { user } = yield auth.signInWithEmailAndPassword(email, password);\n      yield getSnapShotFromUserAuth(user)\n\n   } catch(err) {\n      yield put(signInFailure(err));\n   }\n};\n\nexport function* isUserAuthenticated() {\n   try {\n      const userAuth = yield getCurrentUser();\n      if(!userAuth) return;\n      yield getSnapShotFromUserAuth(userAuth);\n   } catch(err) {\n      yield put(signInFailure(err));\n   }\n};\n\nexport function* onGoogleSignInStart() {\n   yield takeLatest(userActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n};\n\nexport function* onEmailSignInStart() {\n   yield takeLatest(userActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n};\n\nexport function* onCheckUserSession() {\n   yield takeLatest(userActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n};\n\nexport function* userSagas() {\n   yield all( [ call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated) ] );\n};\n\n\n"]},"metadata":{},"sourceType":"module"}